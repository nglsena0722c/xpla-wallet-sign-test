{"version":3,"sources":["App.js","index.js"],"names":["App","lcd","LCDClient","chainID","URL","status","network","wallets","connect","disconnect","useWallet","connectedWallet","useConnectedWallet","amount","setAmount","useState","recipient","setRecipient","loading","setLoading","txResult","setTxResult","txError","setTxError","useEffect","timer","setTimeout","async","tx","txInfo","result","txhash","err","clearTimeout","_jsx","className","children","WalletStatus","WALLET_NOT_CONNECTED","_jsxs","_Fragment","type","onClick","length","xplaAddress","for","id","autoComplete","placeholder","onChange","e","target","value","transactionMsg","msgs","MsgSend","walletAddress","axpla","post","success","error","UserDenied","Error","message","String","style","marginTop","href","name","rel","root","createRoot","document","getElementById","getChainOptions","then","chainOptions","render","WalletProvider"],"mappings":"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","file":"static/js/main.f7ea30a0.chunk.js","sourcesContent":["import {\n  useConnectedWallet,\n  UserDenied,\n  useWallet,\n  WalletStatus,\n} from \"@xpla/wallet-provider\";\nimport React, { useState, useEffect } from \"react\";\nimport { LCDClient, MsgSend } from \"@xpla/xpla.js\";\n\nexport default function App() {\n  const lcd = new LCDClient({\n      chainID: 'cube_47-5',\n      URL: 'https://cube-lcd.xpla.dev'\n  });\n\n  const {\n      status,\n      network,\n      wallets,\n      connect,\n      disconnect\n  } = useWallet();\n\n  const connectedWallet = useConnectedWallet();\n\n  const [amount, setAmount] = useState(\"\");\n  const [recipient, setRecipient] = useState(\"\");\n\n  const [loading, setLoading] = useState(1);\n  const [txResult, setTxResult] = useState(null);\n  const [txError, setTxError] = useState(null);\n\n  const handleSend = async () => {\n      try {\n          const transactionMsg = {\n              msgs: [\n                  new MsgSend(connectedWallet.walletAddress, recipient, {\n                      axpla: amount\n                  }),\n              ],\n          };\n          const tx = await connectedWallet.post(transactionMsg);\n          if (tx.success) {\n              setLoading(true);\n              setTxResult(tx);\n          }\n          else setTxError(\"Please Retry Send!\");\n      } catch (error) {\n          if (error instanceof UserDenied) {\n              setTxError(\"User Denied\");\n          } else {\n              setTxError(\"Unknown Error: \" + error instanceof Error ? error.message : String(error));\n          }\n      }\n  };\n\n  useEffect(() => {\n      if (txResult && loading !== 0) {\n          const timer = setTimeout(async () => {\n              try {\n                  const txInfo = await lcd.tx.txInfo(txResult.result.txhash);\n                  if (txInfo.txhash) setLoading(0);\n              } catch (err) {\n                  setLoading(loading + 1);\n              }\n          }, 1000);\n          return () => clearTimeout(timer);\n      }\n  }, [loading]);\n\n  return <div className=\"example-container\">\n      {status === WalletStatus.WALLET_NOT_CONNECTED ? (\n          <>\n              <button\n                  className=\"button-css width-full\"\n                  type=\"button\"\n                  onClick={() => connect()}\n              >\n                  Connect Wallet\n              </button>\n              <p className=\"warning\">If there is no change even after clicking the button, please press the refresh button in the bottom right corner of the screen.</p>\n          </>\n      ) : (\n          <>\n              <div className=\"info-container\">\n                  <div className=\"info-title\">Connected Address</div>\n                  <div className=\"info-content\">\n                      {wallets.length === 0 ? \"Loading...\" : wallets[0].xplaAddress}\n                  </div>\n              </div>\n              <div className=\"info-container\">\n                  <label className=\"info-title\" for=\"recipient\">\n                      Recipient\n                  </label>\n                  <input\n                      className=\"info-content\"\n                      id=\"recipient\"\n                      autoComplete=\"off\"\n                      type=\"text\"\n                      placeholder=\"xpla1cwduqw0z8y66mnfpev2mvrzzzu98tuexepmwrk\"\n                      onChange={(e) => setRecipient(e.target.value)}\n                  />\n              </div>\n              <div className=\"info-container\">\n                  <label className=\"info-title\" for=\"amount\">\n                      Amount (aXPLA)\n                  </label>\n                  <input\n                      className=\"info-content\"\n                      autoComplete=\"off\"\n                      id=\"Amount\"\n                      placeholder=\"1\"\n                      onChange={(e) => setAmount(e.target.value)}\n                  />\n              </div>\n              <div className=\"bottom-button-container\">\n                  <button className=\"button-css\" type=\"button\" onClick={handleSend}>\n                      Send Tx\n                  </button>\n                  <button className=\"button-css\" type=\"button\" onClick={disconnect}>\n                      Disconnect\n                  </button>\n              </div>\n              {txResult && (\n                  <div style={{ marginTop: 20 }}>\n                      <div className=\"info-title\">Send Transaction Hash</div>\n                      <div className=\"info-content\">\n                          {\n                              loading !== 0 ?\n                                  <span>Loading...</span>\n                                  :\n                                  <a\n                                      className=\"link\"\n                                      href={\"https://explorer.xpla.io/\" + network.name + \"/tx/\" + txResult.result.txhash}\n                                      target=\"_blank\"\n                                      rel=\"noreferrer\"\n                                  >\n                                      {txResult.result.txhash}\n                                  </a>\n                          }\n                      </div>\n                  </div>\n              )}\n              {txError && (\n                  <div style={{ marginTop: 20 }}>\n                      <div className=\"info-title\">Tx Error</div>\n                      <div className=\"info-content\">\n                          <span>\n                              {txError}\n                          </span>\n                      </div>\n                  </div>\n              )}\n          </>\n      )}\n  </div>\n}","import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"./index.css\";\nimport {\n    getChainOptions,\n    WalletProvider,\n} from \"@xpla/wallet-provider\";\nimport App from \"./App\";\n\nconst root = createRoot(document.getElementById('root'));\ngetChainOptions().then((chainOptions) => {\n    root.render(\n        <WalletProvider {...chainOptions}>\n            <App />\n        </WalletProvider>\n    );\n});"],"sourceRoot":""}