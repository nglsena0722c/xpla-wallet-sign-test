{"version":3,"sources":["App.js","index.js"],"names":["App","status","wallets","connect","disconnect","useWallet","connectedWallet","useConnectedWallet","signresult","setSignResult","useState","signError","setsignError","signverifyResult","setSignVerifyResult","useEffect","signature","result","signresultpubkey","public_key","SimplePublicKey","key","signbytes","Uint8Array","Object","values","checkAddress","xplaAddress","address","verifyBytes","Buffer","from","_jsx","className","children","WalletStatus","WALLET_CONNECTED","_jsxs","_Fragment","type","onClick","async","length","signBytes","error","UserDenied","Error","message","String","style","marginTop","root","createRoot","document","getElementById","getChainOptions","then","chainOptions","render","WalletProvider"],"mappings":"qJAAA,kFAUe,SAASA,IACpB,MAAM,OACFC,EAAM,QACNC,EAAO,QACPC,EAAO,WACPC,GACAC,cAEEC,EAAkBC,eAGjBC,EAAYC,GAAiBC,mBAAS,OACtCC,EAAWC,GAAgBF,mBAAS,OACpCG,EAAkBC,GAAuBJ,mBAAS,gBAqCzD,OApBAK,qBAAU,KAGN,IAAKP,EAED,YADAM,EAAoB,gBAIxB,MAAME,EAAYR,EAAWS,OAAOD,UAC9BE,EAAmBV,EAAWS,OAAOE,WACrCA,EAAa,IAAIC,kBAAgBF,EAAiBG,KAClDC,EAAY,CACdN,UAAW,IAAIO,WAAWC,OAAOC,OAAOT,IACxCG,cAGEO,EAAgBxB,EAAQ,GAAGyB,cAAgBR,EAAWS,UAC5Dd,EAAqBe,YAAYC,EAAOC,KAhBnB,QAgBuCT,KAAgC,IAAjBI,EAA0B,WAAa,kBAAkB,GACrI,CAAClB,EAAYM,EAAqBZ,IAE9B8B,cAAA,OAAKC,UAAU,oBAAmBC,SACpCjC,IAAWkC,IAAaC,iBACrBC,eAAAC,WAAA,CAAAJ,SAAA,CACIF,cAAA,UACIC,UAAU,wBACVM,KAAK,SACLC,QAASC,gBACCtC,GAAS,EACjB+B,SACL,mBAGDF,cAAA,KAAGC,UAAU,UAASC,SAAC,uIAG3BG,eAAAC,WAAA,CAAAJ,SAAA,CACIG,eAAA,OAAKJ,UAAU,iBAAgBC,SAAA,CAC3BF,cAAA,OAAKC,UAAU,aAAYC,SAAC,sBAC5BF,cAAA,OAAKC,UAAU,eAAcC,SACL,IAAnBhC,EAAQwC,OAAe,aAAexC,EAAQ,GAAGyB,iBAG1DU,eAAA,OAAKJ,UAAU,0BAAyBC,SAAA,CACpCF,cAAA,UAAQC,UAAU,aAAaM,KAAK,SAASC,QA1DrCC,UAGpB,IACI,MAAMxB,QAAeX,EAAgBqC,UAAUb,EAAOC,KAHrC,SAIjBtB,EAAcQ,EAClB,CAAE,MAAO2B,GACDA,aAAiBC,IACjBjC,EAAa,eAEbA,EAAa,kBAAoBgC,aAAiBE,MAAQF,EAAMG,QAAUC,OAAOJ,GAEzF,GA8CkFV,SAAC,cAGvEF,cAAA,UAAQC,UAAU,aAAaM,KAAK,SAASC,QAASpC,EAAW8B,SAAC,kBAKrE1B,GACG6B,eAAA,OAAKY,MAAO,CAAEC,UAAW,IAAKhB,SAAA,CAC1BF,cAAA,OAAKC,UAAU,aAAYC,SAAC,qBAC5BF,cAAA,OAAKC,UAAU,eAAcC,SACzBF,cAAA,QAAAE,SACKrB,SAKhBF,GACG0B,eAAA,OAAKY,MAAO,CAAEC,UAAW,IAAKhB,SAAA,CAC1BF,cAAA,OAAKC,UAAU,aAAYC,SAAC,aAC5BF,cAAA,OAAKC,UAAU,eAAcC,SACzBF,cAAA,QAAAE,SACKvB,aAQjC,C,4DClHA,4DASA,MAAMwC,EAAOC,qBAAWC,SAASC,eAAe,SAChDC,cAAkBC,MAAMC,IACpBN,EAAKO,OACD1B,cAAC2B,IAAc,IAAKF,EAAYvB,SAC5BF,cAAChC,IAAG,MAEX,G","file":"static/js/main.9d36711f.chunk.js","sourcesContent":["import {\n    useConnectedWallet,\n    UserDenied,\n    useWallet,\n    WalletStatus,\n    verifyBytes\n} from \"@xpla/wallet-provider\";\nimport React, { useState, useEffect } from \"react\";\nimport { SimplePublicKey } from \"@xpla/xpla.js\";\n\nexport default function App() {\n    const {\n        status,\n        wallets,\n        connect,\n        disconnect,\n    } = useWallet();\n\n    const connectedWallet = useConnectedWallet();\n\n\n    const [signresult, setSignResult] = useState(null);\n    const [signError, setsignError] = useState(null);\n    const [signverifyResult, setSignVerifyResult] = useState(\"not verified\");\n\n    const handleSignbytes = async () => {\n        const signMessages = `test`;\n\n        try {\n            const result = await connectedWallet.signBytes(Buffer.from(signMessages));\n            setSignResult(result);\n        } catch (error) {\n            if (error instanceof UserDenied) {\n                setsignError(\"User Denied\");\n            } else {\n                setsignError(\"Unknown Error: \" + error instanceof Error ? error.message : String(error));\n            }\n        }\n    };\n\n    useEffect(() => {\n        const signMessages = `test`;\n\n        if (!signresult) {\n            setSignVerifyResult(\"not verified\")\n            return;\n        }\n\n        const signature = signresult.result.signature;\n        const signresultpubkey = signresult.result.public_key;\n        const public_key = new SimplePublicKey(signresultpubkey.key);\n        const signbytes = {\n            signature: new Uint8Array(Object.values(signature)),\n            public_key\n        };\n\n        const checkAddress = (wallets[0].xplaAddress === public_key.address());\n        setSignVerifyResult((verifyBytes(Buffer.from(signMessages), signbytes) && (checkAddress === true)) ? \"verified\" : \"wrong signbytes\")\n    }, [signresult, setSignVerifyResult, wallets]);\n\n    return <div className=\"example-container\">\n        {status !== WalletStatus.WALLET_CONNECTED ? (\n            <>\n                <button\n                    className=\"button-css width-full\"\n                    type=\"button\"\n                    onClick={async () =>  {\n                        await connect()\n                    }}\n                >\n                    Connect Wallet\n                </button>\n                <p className=\"warning\">If there is no change even after clicking the button, please press the refresh button in the bottom right corner of the screen.</p>\n            </>\n        ) : (\n            <>\n                <div className=\"info-container\">\n                    <div className=\"info-title\">Connected Address</div>\n                    <div className=\"info-content\">\n                        {wallets.length === 0 ? \"Loading...\" : wallets[0].xplaAddress}\n                    </div>\n                </div>\n                <div className=\"bottom-button-container\">\n                    <button className=\"button-css\" type=\"button\" onClick={handleSignbytes}>\n                        Signbytes\n                    </button>\n                    <button className=\"button-css\" type=\"button\" onClick={disconnect}>\n                        Disconnect\n                    </button>\n                </div>\n\n                {signresult && (\n                    <div style={{ marginTop: 20 }}>\n                        <div className=\"info-title\">Signature Verify</div>\n                        <div className=\"info-content\">\n                            <span>\n                                {signverifyResult}\n                            </span>\n                        </div>\n                    </div>\n                )}\n                {signError && (\n                    <div style={{ marginTop: 20 }}>\n                        <div className=\"info-title\">Tx Error</div>\n                        <div className=\"info-content\">\n                            <span>\n                                {signError}\n                            </span>\n                        </div>\n                    </div>\n                )}\n            </>\n        )}\n    </div>\n}","import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"./index.css\";\nimport {\n    getChainOptions,\n    WalletProvider,\n} from \"@xpla/wallet-provider\";\nimport App from \"./App\";\n\nconst root = createRoot(document.getElementById('root'));\ngetChainOptions().then((chainOptions) => {\n    root.render(\n        <WalletProvider {...chainOptions}>\n            <App />\n        </WalletProvider>\n    );\n});"],"sourceRoot":""}